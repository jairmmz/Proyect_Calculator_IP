/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jPack_ip_calculator;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jairo M-M
 */
public class jFrame_ip_Calculator extends javax.swing.JFrame {

    DefaultTableModel dtm = new DefaultTableModel();
    
    int OneValue;
    int TwoValue;
    int ThreeValue;
    int FourValue;
    
    int inputNumbSubnet;
    /**
     * Creates new form jFrame_ip_Calculator
     */
    public jFrame_ip_Calculator() {
        initComponents();
        CenterWindows();
        setIconImage(getIcoImage());
        
        String title[] = {"N°","IP de sub red","Rango de IPs configurables","IP broadcast de la sub red"};
        dtm.setColumnIdentifiers(title);
        
        jTable_subred.setModel(dtm);
        jTable_subred.getColumnModel().getColumn(0).setMaxWidth(50);
        jTable_subred.getColumnModel().getColumn(1).setMaxWidth(150);
        jTable_subred.getColumnModel().getColumn(2).setMaxWidth(340);
        jTable_subred.getColumnModel().getColumn(3).setMaxWidth(200);

    }
    
    //Icono del programa.
    public Image getIcoImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/icon_ip.png"));
        return retValue;
    }
    
    public void CenterWindows(){
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        
        if(frameSize.height > screenSize.height){
            frameSize.height = screenSize.height;
        }
        
        if(frameSize.width > screenSize.width){
            frameSize.width = screenSize.width;
        }
        
        //Centrar ventana
        setLocation((screenSize.width - frameSize.width)/2, (screenSize.height - frameSize.height)/2);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    void CleanResult(){   
        jTxt_InputOneValue.setText("");
        jTxt_InputTwoValue.setText("");
        jTxt_InputThreeValue.setText("");
        jTxt_InputFourValue.setText("");

        // Limpiar datos..
        jTxt_Class.setText("");
        jTxt_IP_red.setText("");
        jTxt_IP_host.setText("");
        jTxt_ID_red.setText("");
        jTxt_ID_host.setText("");
        jTxt_IP_shell.setText("");
        jTxt_IP_broadcast.setText("");
        jTxt_Numb_IPs.setText("");
        jTxt_Num_IPs_conf.setText("");
    }         
            
    void ClassDireccionIP(){
        // Variable de condición para el primer valor de la dirección IP.
        OneValue = Integer.parseInt(jTxt_InputOneValue.getText().toString());
        
        TwoValue = Integer.parseInt(jTxt_InputTwoValue.getText().toString());
        ThreeValue = Integer.parseInt(jTxt_InputThreeValue.getText().toString());
        FourValue = Integer.parseInt(jTxt_InputFourValue.getText().toString());
        int value = 255;
         
        if(!(OneValue > value || TwoValue > value || ThreeValue > value || FourValue > value)){
                if(OneValue >= 1 && OneValue <= 127){
                    Class_A();
                }else if(OneValue >= 128 && OneValue <= 191){
                        Class_B();
                        }else if(OneValue >= 192 && OneValue <= 223){
                                Class_C();
                            }else if(OneValue >= 224 && OneValue <= 239){
                                getToolkit().beep();
                                JOptionPane.showMessageDialog(null, "Dirección IP Multicast", "Alerta", JOptionPane.WARNING_MESSAGE);
                                }else if(OneValue >= 240 && OneValue <= 255){
                                    getToolkit().beep();
                                    JOptionPane.showMessageDialog(null, "Dirección IP Experimental", "Alerta", JOptionPane.WARNING_MESSAGE); 
                                }else if(OneValue == 0){
                                    getToolkit().beep();
                                    JOptionPane.showMessageDialog(null, "No es una opción valida. Especifique un valor entre 1 a 223", "Alerta", JOptionPane.WARNING_MESSAGE); 
                            }
            }else{
                getToolkit().beep();
                JOptionPane.showMessageDialog(null, "Valor superado", "Alerta", JOptionPane.WARNING_MESSAGE); 
            }  
    } 
            
    //Método para la clase A
    void Class_A(){
        //0 no es una opción valida. Especifique un valor entre 1 a 223 para el primer valor.
        OneValue = Integer.parseInt(jTxt_InputOneValue.getText().toString());
        TwoValue = Integer.parseInt(jTxt_InputTwoValue.getText().toString());
        ThreeValue = Integer.parseInt(jTxt_InputThreeValue.getText().toString());
        FourValue = Integer.parseInt(jTxt_InputFourValue.getText().toString());
        
        if(TwoValue == 0 && ThreeValue == 0 && FourValue == 0){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Dirección IP reservado para la IP de red!", "Alerta", JOptionPane.WARNING_MESSAGE);      
        }else if(TwoValue == 255 && ThreeValue == 255 && FourValue == 255){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Dirección IP reservado para la IP de broadcast!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }else{
            if(inputNumbSubnet != 16){
                subRedTable('a');
                //DESARROLLAR LA LOGICA PARA LA CONDICIÓN
            }else{
                jTxt_Class.setText("A");
                jTxt_IP_red.setText(OneValue+".0.0.0");
                jTxt_IP_host.setText(OneValue+"."+TwoValue+"."+ThreeValue+"."+FourValue);
                jTxt_ID_red.setText(OneValue+".");
                jTxt_ID_host.setText("."+TwoValue+"."+ThreeValue+"."+FourValue);
                jTxt_IP_shell.setText("255.0.0.0");
                jTxt_IP_broadcast.setText(OneValue+".255.255.255");
                jTxt_Numb_IPs.setText("16.777.216");
                jTxt_Num_IPs_conf.setText("16.777.214");   
            }
 
        }
    }
    
    //Método para la clase B
    void Class_B(){
        OneValue = Integer.parseInt(jTxt_InputOneValue.getText().toString());
        TwoValue = Integer.parseInt(jTxt_InputTwoValue.getText().toString());
        ThreeValue = Integer.parseInt(jTxt_InputThreeValue.getText().toString());
        FourValue = Integer.parseInt(jTxt_InputFourValue.getText().toString());
        
        inputNumbSubnet = Integer.parseInt(jTxt_InputNumbSubnet.getText().toString());
        
        if(ThreeValue == 0 && FourValue == 0){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Dirección IP reservado para la IP de red!", "Alerta", JOptionPane.WARNING_MESSAGE);               
        }else if(ThreeValue == 255 && FourValue == 255){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Dirección IP reservado para la IP de broadcast!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }else{
            if(inputNumbSubnet != 16){
                subRedTable('b');
                //DESARROLLAR LA LOGICA PARA LA CONDICIÓN
            }else{
                jTxt_Class.setText("B");
                jTxt_IP_red.setText(OneValue+"."+TwoValue+".0.0");
                jTxt_IP_host.setText(OneValue+"."+TwoValue+"."+ThreeValue+"."+FourValue);
                jTxt_ID_red.setText(OneValue+"."+TwoValue+".");
                jTxt_ID_host.setText("."+ThreeValue+"."+FourValue);
                jTxt_IP_shell.setText("255.255.0.0");
                jTxt_IP_broadcast.setText(OneValue+"."+TwoValue+".255.255");
                jTxt_Numb_IPs.setText("65.536");
                jTxt_Num_IPs_conf.setText("65.534");   
            }
    
        }
    }
    
    //Método para la clase C
    void Class_C(){
        OneValue = Integer.parseInt(jTxt_InputOneValue.getText().toString());
        TwoValue = Integer.parseInt(jTxt_InputTwoValue.getText().toString());
        ThreeValue = Integer.parseInt(jTxt_InputThreeValue.getText().toString());
        FourValue = Integer.parseInt(jTxt_InputFourValue.getText().toString());
        
        inputNumbSubnet = Integer.parseInt(jTxt_InputNumbSubnet.getText().toString());
        
        if(FourValue == 0){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Dirección IP reservado para la IP de red!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }else if(FourValue == 255){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Dirección IP reservado para la IP de broadcast!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }else{          
            if(inputNumbSubnet != 24){
                subRedTable('c');
                //DESARROLLAR LA LOGICA PARA LA CONDICIÓN
            }else{
                jTxt_Class.setText("C");
                jTxt_IP_red.setText(OneValue+"."+TwoValue+"."+ThreeValue+".0");
                jTxt_IP_host.setText(OneValue+"."+TwoValue+"."+ThreeValue+"."+FourValue);
                jTxt_ID_red.setText(OneValue+"."+TwoValue+"."+ThreeValue+".");
                jTxt_ID_host.setText("."+FourValue);
                jTxt_IP_shell.setText("255.255.255.0");
                jTxt_IP_broadcast.setText(OneValue+"."+TwoValue+"."+ThreeValue+".255");
                jTxt_Numb_IPs.setText("256");
                jTxt_Num_IPs_conf.setText("254");  
            }
            
        }
    }
    
    //Validación para la dirección IP.
    public void verifInputNumber(KeyEvent evt){
    char validar = evt.getKeyChar(); 

        if(Character.isLetter(validar) || (validar == '-' || validar == '+' || validar == ' ' || validar == '.')){
            getToolkit().beep();
            evt.consume();
            //JOptionPane.showMessageDialog(rootPane, "Igrese solo numeros");
        }        
    }
    
    void CleanTable(){
        dtm.setRowCount(0);
    }
    
    void calculateMask(int CalculateMask){
	int resultCalculateMask = 0;
	if( CalculateMask > 1 && CalculateMask <= 2){
		resultCalculateMask = 128;		
	}
	if( CalculateMask >= 3 && CalculateMask <= 4){
		resultCalculateMask = 192;		
	}
	if( CalculateMask >= 5 && CalculateMask <=8 ){
		resultCalculateMask = 224;		
	}
	if( CalculateMask >= 9 && CalculateMask <= 16){
		resultCalculateMask = 240;		
	}
	if( CalculateMask >= 17 && CalculateMask <= 32){
		resultCalculateMask = 248;		
	}
	if( CalculateMask >= 33 && CalculateMask <= 64){
		resultCalculateMask = 252;		
	}
	if( CalculateMask >= 65 && CalculateMask <= 128){
		resultCalculateMask = 254;		
	}
	if( CalculateMask >= 129 && CalculateMask <= 256){
		resultCalculateMask = 255;		
	}
    }
    
    void subRedTable(char classIP){
	CleanTable();
        String date[] = new String[4];

        OneValue = Integer.parseInt(jTxt_InputOneValue.getText().toString());
        TwoValue = Integer.parseInt(jTxt_InputTwoValue.getText().toString());
        ThreeValue = Integer.parseInt(jTxt_InputThreeValue.getText().toString());
        FourValue = Integer.parseInt(jTxt_InputFourValue.getText().toString());
	
        inputNumbSubnet = Integer.parseInt(jTxt_InputNumbSubnet.getText().toString());     
        
        int totalSubnets = 0;		// pow(2,i) -> Total de subredes
        int totalSubnetsConfig = 0; // (pow(2,i)-2) -> Total de subredes configurables;

        int totalHostSubnets = 0;	// pow(2,8 - bits utilizados) -> Total de IPs para cada subred	
        int totalHostConfig = 0; 	// (pow(2,8 - bits utilizados)-2) -> Total de IPs configurables para cada subred;

        for(int i = 1; i < 9; i++){
            totalSubnetsConfig =  ((int)Math.pow(2, i)-2); //(pow(2,i)-2);	
            if(inputNumbSubnet <= totalSubnetsConfig){
                totalSubnets =  (int) Math.pow(2, i); //pow(2,i);
                totalSubnetsConfig =  ((int)Math.pow(2, i)-2); //(pow(2,i)-2);
                totalHostSubnets = (int) Math.pow(2, 8-i);  //pow(2,8-i);
                totalHostConfig =  ((int) Math.pow(2, i)-2); //(pow(2,8-i)-2);
                break;
            }
        }

        if(classIP == 'a' || classIP == 'A'){
            // subredes para la clase a
            int valueTwoSubnet = 0;
            int valueTwoRange = 0;

            for(int i = 0; i < totalSubnets; i++){
                // IP de subred.
                date[0] = i +"";
                date[1] = OneValue+"."+valueTwoSubnet+"."+0+"."+0;
                valueTwoSubnet += totalHostSubnets;

                // Rango de IPs de la subred configurables.
                date[2] = OneValue+"."+valueTwoRange+"."+0+"."+1+" - "+OneValue+"."+(valueTwoSubnet-1)+"."+255+"."+254;

                // IP broadcast de la subred
                date[3] = OneValue+"."+(valueTwoSubnet-1)+"."+255+"."+255;

                // Contador IP de Primer valor.
                valueTwoRange += totalHostSubnets;	
                
                // Agregando a la tabla.
                dtm.addRow(date);
            }
            //calculateMask(totalSubnets);		
        }

        if(classIP == 'b' || classIP == 'B'){
                // subredes para la clase b
                int valueThreeSubnet = 0;
                int valueThreeRange = 0;

                for(int i = 0; i < totalSubnets; i++){
                        // IP de subred.
                        date[0] = i+"";
                        date[1] = OneValue+"."+TwoValue+"."+valueThreeSubnet+"."+0;
                        valueThreeSubnet += totalHostSubnets;

                        // Rango de IPs de la subred configurables.
                        date[2] = OneValue+"."+TwoValue+"."+valueThreeRange+"."+1+" - "+OneValue+"."+TwoValue+"."+(valueThreeSubnet-1)+"."+254;

                        // IP broadcast de la subred
                        date[3] = OneValue+"."+TwoValue+"."+(valueThreeSubnet-1)+"."+255;

                        // Contador IP de Primer valor.
                        valueThreeRange += totalHostSubnets;	
                        
                        // Agregando a la tabla.
                        dtm.addRow(date);
                }	
                //calculateMask(totalSubnets);
        }

        if(classIP == 'c' || classIP == 'C'){
                int valueFourSubnet = 0;
                int valueFourRange = 1;

                for(int i = 0; i < totalSubnets; i++){
                        // IP de subred.
                        date[0] = i+"";
                        date[1] = OneValue+"."+TwoValue+"."+ThreeValue+"."+valueFourSubnet;
                        valueFourSubnet += totalHostSubnets;

                        // Rango de IPs de la subred configurables.
                        date[2] = OneValue+"."+TwoValue+"."+ThreeValue+"."+valueFourRange+" - "+OneValue+"."+TwoValue+"."+ThreeValue+"."+(valueFourSubnet-2);

                        // IP broadcast de la subred
                        date[3] = OneValue+"."+TwoValue+"."+ThreeValue+"."+(valueFourSubnet-1);

                        // Contador IP de Primer valor.
                        valueFourRange += totalHostSubnets;	
                        
                        // Agregando a la tabla.
                        dtm.addRow(date);
                }
                //calculateMask(totalSubnets);		
        }  
        
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTxt_Class = new javax.swing.JTextField();
        jTxt_IP_red = new javax.swing.JTextField();
        jTxt_IP_host = new javax.swing.JTextField();
        jTxt_ID_red = new javax.swing.JTextField();
        jTxt_ID_host = new javax.swing.JTextField();
        jTxt_IP_shell = new javax.swing.JTextField();
        jTxt_IP_broadcast = new javax.swing.JTextField();
        jTxt_Numb_IPs = new javax.swing.JTextField();
        jTxt_Num_IPs_conf = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTxt_InputOneValue = new javax.swing.JTextField();
        jTxt_InputTwoValue = new javax.swing.JTextField();
        jTxt_InputThreeValue = new javax.swing.JTextField();
        jTxt_InputFourValue = new javax.swing.JTextField();
        jBttn_Calculate = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTxt_InputNumbSubnet = new javax.swing.JTextField();
        jBttn_Clean_Field = new javax.swing.JButton();
        jBttn_Close = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_subred = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculadora IP");
        setIconImage(getIconImage());

        jPanel1.setBackground(new java.awt.Color(51, 134, 255));

        jPanel2.setBackground(new java.awt.Color(175, 221, 244));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Clase:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("IP de red:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("IP de host:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("ID de red:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("ID de host:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Mascara:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("IP de Broadcast:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("N° de IPs:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("N° de IPs configurables:");

        jTxt_Class.setEditable(false);
        jTxt_Class.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxt_IP_red.setEditable(false);
        jTxt_IP_red.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxt_IP_host.setEditable(false);
        jTxt_IP_host.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxt_ID_red.setEditable(false);
        jTxt_ID_red.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxt_ID_host.setEditable(false);
        jTxt_ID_host.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxt_IP_shell.setEditable(false);
        jTxt_IP_shell.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxt_IP_broadcast.setEditable(false);
        jTxt_IP_broadcast.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxt_Numb_IPs.setEditable(false);
        jTxt_Numb_IPs.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxt_Num_IPs_conf.setEditable(false);
        jTxt_Num_IPs_conf.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTxt_Num_IPs_conf, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_IP_broadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_IP_shell, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_ID_host, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_ID_red, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_IP_host, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_IP_red, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_Class, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_Numb_IPs, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTxt_Class, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTxt_IP_red, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTxt_IP_host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTxt_ID_red, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTxt_ID_host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTxt_IP_shell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTxt_IP_broadcast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTxt_Numb_IPs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTxt_Num_IPs_conf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(51, 199, 255));

        jLabel1.setBackground(new java.awt.Color(51, 134, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Calculadora IP");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Dirección IP:");

        jTxt_InputOneValue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTxt_InputOneValue.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jTxt_InputOneValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxt_InputOneValueKeyTyped(evt);
            }
        });

        jTxt_InputTwoValue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTxt_InputTwoValue.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jTxt_InputTwoValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxt_InputTwoValueKeyTyped(evt);
            }
        });

        jTxt_InputThreeValue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTxt_InputThreeValue.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jTxt_InputThreeValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxt_InputThreeValueKeyTyped(evt);
            }
        });

        jTxt_InputFourValue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTxt_InputFourValue.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jTxt_InputFourValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxt_InputFourValueKeyTyped(evt);
            }
        });

        jBttn_Calculate.setBackground(new java.awt.Color(255, 0, 0));
        jBttn_Calculate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBttn_Calculate.setText("Calcular");
        jBttn_Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBttn_CalculateActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("N° de subredes");

        jTxt_InputNumbSubnet.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTxt_InputNumbSubnet.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jTxt_InputNumbSubnet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxt_InputNumbSubnetKeyTyped(evt);
            }
        });

        jBttn_Clean_Field.setBackground(new java.awt.Color(0, 255, 51));
        jBttn_Clean_Field.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBttn_Clean_Field.setText("Borrar");
        jBttn_Clean_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBttn_Clean_FieldActionPerformed(evt);
            }
        });

        jBttn_Close.setBackground(new java.awt.Color(255, 0, 0));
        jBttn_Close.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBttn_Close.setText("Salir");
        jBttn_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBttn_CloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTxt_InputOneValue, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTxt_InputTwoValue, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTxt_InputThreeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTxt_InputFourValue, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTxt_InputNumbSubnet, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(jBttn_Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(jBttn_Clean_Field)
                .addGap(34, 34, 34)
                .addComponent(jBttn_Close)
                .addGap(39, 39, 39))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(382, 382, 382))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTxt_InputOneValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_InputTwoValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_InputThreeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxt_InputFourValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBttn_Calculate)
                    .addComponent(jLabel12)
                    .addComponent(jTxt_InputNumbSubnet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBttn_Clean_Field)
                    .addComponent(jBttn_Close))
                .addContainerGap())
        );

        jTable_subred.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable_subred.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable_subred.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable_subred);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Tabla de sub redes");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(219, 219, 219))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBttn_CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBttn_CloseActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        //this.dispose();
    }//GEN-LAST:event_jBttn_CloseActionPerformed

    private void jBttn_Clean_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBttn_Clean_FieldActionPerformed
        CleanResult();
    }//GEN-LAST:event_jBttn_Clean_FieldActionPerformed

    private void jBttn_CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBttn_CalculateActionPerformed

            if(jTxt_InputOneValue.getText().trim().isEmpty() || jTxt_InputTwoValue.getText().trim().isEmpty() || jTxt_InputThreeValue.getText().trim().isEmpty() || jTxt_InputFourValue.getText().trim().isEmpty()){
                getToolkit().beep();
                JOptionPane.showMessageDialog(null, "Llene todos los campos!");      
            }else{
                ClassDireccionIP();
          } 
    }//GEN-LAST:event_jBttn_CalculateActionPerformed

    private void jTxt_InputOneValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxt_InputOneValueKeyTyped
        verifInputNumber(evt);
        if(jTxt_InputOneValue.getText().length() >= 3){
            evt.consume();
        }
    }//GEN-LAST:event_jTxt_InputOneValueKeyTyped

    private void jTxt_InputTwoValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxt_InputTwoValueKeyTyped
        verifInputNumber(evt);
        if(jTxt_InputTwoValue.getText().length() >= 3){
            evt.consume();
        }
    }//GEN-LAST:event_jTxt_InputTwoValueKeyTyped

    private void jTxt_InputThreeValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxt_InputThreeValueKeyTyped
        verifInputNumber(evt);
        if(jTxt_InputThreeValue.getText().length() >= 3){
            evt.consume();
        }
    }//GEN-LAST:event_jTxt_InputThreeValueKeyTyped

    private void jTxt_InputFourValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxt_InputFourValueKeyTyped
        verifInputNumber(evt);
        if(jTxt_InputFourValue.getText().length() >= 3){
            evt.consume();
        }
    }//GEN-LAST:event_jTxt_InputFourValueKeyTyped

    private void jTxt_InputNumbSubnetKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxt_InputNumbSubnetKeyTyped
        verifInputNumber(evt);
        if(jTxt_InputNumbSubnet.getText().length() >= 2){
            evt.consume();
        }
    }//GEN-LAST:event_jTxt_InputNumbSubnetKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFrame_ip_Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFrame_ip_Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFrame_ip_Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFrame_ip_Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jFrame_ip_Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBttn_Calculate;
    private javax.swing.JButton jBttn_Clean_Field;
    private javax.swing.JButton jBttn_Close;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_subred;
    private javax.swing.JTextField jTxt_Class;
    private javax.swing.JTextField jTxt_ID_host;
    private javax.swing.JTextField jTxt_ID_red;
    private javax.swing.JTextField jTxt_IP_broadcast;
    private javax.swing.JTextField jTxt_IP_host;
    private javax.swing.JTextField jTxt_IP_red;
    private javax.swing.JTextField jTxt_IP_shell;
    private javax.swing.JTextField jTxt_InputFourValue;
    private javax.swing.JTextField jTxt_InputNumbSubnet;
    private javax.swing.JTextField jTxt_InputOneValue;
    private javax.swing.JTextField jTxt_InputThreeValue;
    private javax.swing.JTextField jTxt_InputTwoValue;
    private javax.swing.JTextField jTxt_Num_IPs_conf;
    private javax.swing.JTextField jTxt_Numb_IPs;
    // End of variables declaration//GEN-END:variables
}
